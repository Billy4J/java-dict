<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.afterAll.mybatis.mapper.DynamicSqlMapper">


    <!--sql片段-->
    <sql id="sqlDemo">
        select *
        from t_user
    </sql>

    <!--
    if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行
    -->
    <select id="getUser" resultType="User">
        select *
        from t_user
        where 1=1
        <if test="id!='' and id !=null">
            and id = #{id}
        </if>
        <if test="name !='' and name !=null">
            and name = #{name}
        </if>
    </select>


    <!--
    where和if一般结合使用：
    a>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字
    b>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and去掉
    注意：where标签不能去掉条件最后多余的and
    -->
    <select id="getUser2" resultType="User">
        select * from t_user
        <where>
            <if test="id !='' and id !=null">
                and id = #{id}
            </if>
            <if test="name !='' and name !=null">
                and name = #{name}
            </if>
        </where>
    </select>

    <!--
    trim用于去掉或添加标签中的内容
    常用属性：
    prefix：在trim标签中的内容的前面添加某些内容
    prefixOverrides：在trim标签中的内容的前面去掉某些内容
    suffix：在trim标签中的内容的后面添加某些内容
    suffixOverrides：在trim标签中的内容的后面去掉某些内容
    -->

    <select id="getUser3" resultType="User">
        select *
        from t_user
        <trim prefix="where" suffixOverrides="and">
            <if test="id!='' and id !=null">
                id = #{id} and
            </if>
            <if test="name !='' and name !=null">
                name = #{name} and
            </if>
        </trim>
    </select>

    <select id="getUser4" resultType="User">
        select * from t_user
        <where>
            <choose>
                <when test="id !='' and id !=null">
                    id = #{id}
                </when>
                <when test="name !='' and name !=null">
                    name = #{name}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>


    <!--
    属性：
    collection：设置要循环的数组或集合
    item：表示集合或数组中的每一个数据
    separator：设置循环体之间的分隔符
    open：设置foreach标签中的内容的开始符
    close：设置foreach标签中的内容的结束符
    -->
    <insert id="insertUsers">
        insert into t_user values
        <foreach collection="users" item="user" separator=",">
            (null ,#{user.name},null,null)
        </foreach>
    </insert>

    <delete id="deleteUsers">
        delete
        from t_user
        where id in
        <foreach collection="users" item="user" separator="," open="(" close=")">
            #{user.id}
        </foreach>
    </delete>

    <delete id="deleteUsers2">
        delete
        from t_user
        <where>
            <foreach collection="users" item="user">
                id = #{user.id}
            </foreach>
        </where>
    </delete>


</mapper>


